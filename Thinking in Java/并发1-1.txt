##重温并发
###并发的多面性--用于解决“速度”和“设计可管理性”<br/>
1.提高软件速度<br/>
2.改进代码设计<br/>
###基本的线程机制<br/>
1.为程序的每个子任务用一个执行线程来驱动<br/>


- 定义任务<br/>
实现runable接口
- Thread类<br/>
用于驱动任务的运行<br/>
- 使用executor<br/>
executor用来创建和管理系统中的任务。可以调用shutdown方法停止对新任务的接收，并在原有任务结束后结束进程。<br/>
介绍用executors类的newCacheThread()等方法获取executorService，调用其的execute(Runnabel rn)添加任务
- 定义有返回值的任务<br/>
实现Callable接口，实现call方法。在executorService，调用其的sumbit(Runnabel rn)添加任务<br/>
该任务会产生个Future的独享，需要建立一个集合去存储每个sumbit(Runnabel rn)返回来的结果。<br/>
然后调用Future的get（）方法获取返回结果，可以用isDone()方法去检测是否完成。<br/>
- 休眠<br>
TimeUnit.MILLISECOND.sleep()函数<br/>
- 优先级的设置<br>
Thread.currentThread().setPriority(优先级)和getProriority()方法<br>
- 后台线程<br>
Thread.setDaemon(true)用于将该线程设置为后台线程<br>
isDaemon()判断是否为后台线程<br>
- 编码的变体<br>
可以直接新建一个类继承Thread，实现run方法，当new这个类的实例时将会自动开始一个线程运行run方法<br>
一些利用内部类隐藏线程细节的实践<br>
- 术语<br>
Thread A,B  
 在B运行的线程中，加入A.join()将会将两个线程合并，等A线程执行完毕才继续执行B线程<br>
 或者加入A.join(1000);<br>
- 创建有响应的用户界面
- 共享受限资源<br>
防止线程间访问受限资源冲突的解决方法，就是当一个资源被任务使用时，给这个资源上锁。采用序列化访问共享资源。<br>
 1. 共享资源一般是以对象形式存在的内存片段，可以将其包装进一个对象，把所有访问这个的资源的方法标志位synchronized。如果某个任务处于一个标记为synchronized的方法的调用中，那么在这个线程从该方法返回之前，其他所有要调用该类中synchronize的方法的线程都会被阻塞。使用并发时，对域使用private修饰很有必要。<br> 
 2. 类和对象都内置有一个锁。所以static的域也能用synchronized修饰。<br> 
 3. 使用显示的Lock对象。在临界代码资源中使用lock()和unlock()方法<br> 
 4. <br> 
- 原子性和易变性<br> 
使用volatile可见性。当使用这个修饰符时，对域的修改会写进主内存，其他使用该域的任务就会从主内存读取<br> 
- 临界区<br> 
多个线程同时访问的某段代码块，称为临界区。<br> 
synchronize(object){  //代码块  }<br> 
可以使用this(当前对象)或者自定义对象作对象锁<br> 
线程本地存储---ThreadLocal<Object>  tl = new ThreadLocal(Object);这样就为每个线程绑定一个object对象了。<br> 


